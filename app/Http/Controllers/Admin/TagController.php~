<?php

namespace App\Http\Controllers\Admin;

use App\Models\Tag;
use App\Models\Slug;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Storage;
use Image;

class TagControllerextends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request)
    {
        $tag = Tag::paginate(15);
        return view('admin.tag.index')->with(['tag' => $tag]);
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        return view('admin.tag.add');
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {

        $this->validate($request, [
            'name' => 'required|unique:brands|max:255',
        ]);
        $slug = new Slug();
        $brand = new Brand();
        $input = $request;
        $brand->brand_name = $input['brand_name'];
        $brand->slug = $slug->createSlug($input['brand_name'], 'brands');
        $brand->status = (!empty($input['status']) && $input['status'] == 'on') ? true : false;
        $brand->save();
        return redirect()->route('brand.index')->with('success', 'New Brand successfully.');
    }

    /**
     * Display the specified resource.
     *
     * @param  int $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        $brand = Brand::where('id', '=', $id)->first();
        return view('admin.brand.edit')->with(['brand' => $brand]);
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request $request
     * @param  int $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        $this->validate($request, [
            'brand_name' => 'unique:brands,brand_name,' . $id,
        ]);
        $input = $request->all();
        $slug = new Slug();
        $mt = Brand::find($id);
        $mt->brand_name = $input['brand_name'];
        if ($mt->slug != str_slug($input['brand_name']))
            $mt->slug = $slug->createSlug($input['brand_name'], 'brands');
        $mt->status = (!empty($input['status']) && $input['status'] == 'on') ? true : false;
        $mt->save();
        return redirect()->route('brand.index')->with('success', 'Brand Updated successfully.');
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        //
    }

    public function delete($id)
    {
        $this->deleteMethod($id);
        return redirect()->route('brand.index');
    }

    public function deleteMethod($id)
    {
        $mt = Brand::where('id', $id)->first();
        $mt->delete();
    }

    public function deleteAll(Request $request)
    {
        $data = $request->all();

        $ids = explode(',', $data['ids']);
        foreach ($ids as $id) {
            $this->deleteMethod($id);
        }
        return response()->json(['success' => "Brand Deleted successfully."]);
       
    }

    public function activeDeactivate(Request $request, $id)
    {
        $data = $request->all();
        $mt = Brand::where('id', $id)->first();
        $mt->update(['status' => !($mt->status)]);
        return redirect()->route('brand.index')->with('success', "Brand" . (($mt->status) ? 'Activated' : 'Deactivated') . " Successfully.");
    }
}
